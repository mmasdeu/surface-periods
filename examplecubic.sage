load('padicperiods.sage')

sign = 1
prec = 100
working_prec = 3000

#path = ROOT = '/home/float/darmonpoints/'
from sarithgroup import *
from cohomology import *

x = QQ['x'].gen()
r = QQ['r'].gen()
# PARAMETERS
candidate_list =[('129_0', x^3 - x^2 + 2*x - 3, r, r^2 - r + 1, 1, [-1]),
                 ('129_1', x^3 - x^2 + 2*x - 3, r^2 - r + 1, r, 1, [-1]),
                 ('132_0', x^3 - x^2 + 4*x - 1, r^2 - r + 3, -r^2 + r - 2, 1, [-1]),
                 ('132_1', x^3 - x^2 + 4*x - 1, -r^2 + r - 2, r^2 - r + 3, 1, [-1]),
                 (130, x^3 - x^2 + 2*x - 3, r, 2, 1, [-1]),
                 (183, x^3 - x^2 - 3*x - 3, -r^2 + 2*r + 2, r + 1, 1, [-1]),
                 (184, x^3 - x^2 - 3*x - 3, -r^2 + 2*r + 2, r, 1, [-1]),
                 (194, x^3 - x^2 - 2*x - 3, r, -r + 1, 1, [-1]),
                 (209, x^3 - x^2 + 5*x - 2, 2*r^2 - r + 9, -r + 1, 1, [-1]),
                 (207, x^3 - x^2 + 5*x - 2, r, -r + 1, 1, [-1]),
                 (210, x^3 - 4*x - 5, -r - 1, -r^2 + r + 3, 1, [-1]),
                 (236, x^3 - x^2 - 5*x + 8, -r + 2, -r^2 - r + 3, 1, [-1]),
                 (269, x^3 - x^2 - 3*x - 4, r^2 - 2*r - 2, -r - 1, 1, [-1]),
                 (277, x^3 - 5, r^2 + 2*r + 3, r - 2, 1, [-1]),
                 (465, x^4 - 2*x - 1, -r^3 + r^2 + r + 2, 1, r^3 - 1, [-1, -1])]

candidate_list = [(536, x^4 + 2*x^2 - x - 1, r^3 + 3*r, -r^3 - r^2 - 3*r, 1, [-1, -1]),
                  (557, x^4 - x^3 + x^2 - 2*x - 1, r^2 - r + 1, -r^3 + 2*r^2 - r + 2, 1, [-1, -1]),
                  (547, x^4 - x^3 + x - 2, r^2 + 1, r^2 + 2, 1, [-1, -1]),
                  (608, x^4 - x^3 + 3*x - 1, r^3 - r + 3, r^3 + 1, 1, [-1, -1]),
                  (546, x^4 - x^3 + x - 2, r, -r + 3, 1, [-1, -1]),
                  (529, x^4 - x^2 - 3*x - 1, r^3 - r - 2, r^3 - 2*r^2 - r - 3, 1, [-1, -1]),
                  (636, x^4 - x^3 - 2*x^2 - 3*x + 1, -1/2*r^3 + r^2 + r + 1/2, 2, 1, [-1, -1]),
                  (588, x^4 - 2*x^3 + 2*x^2 - 2, r^2 - r + 1, -r^3 + r - 4, 1, [-1, -1]),
                  (700, x^4 - x^3 + x^2 - 2, r^2 + 1, r^3 - r^2 + r, 1, [-1, -1]),
                  (665, x^4 - 2*x^3 + 2*x^2 + 2*x - 1, -r^2 + 2*r - 2, 2*r^3 - 4*r^2 + 5*r + 1, 1, [-1, -1]),
                  (698, x^4 - x^3 + x^2 - 2, r^2 + 1, 1, r, [-1, -1]),
                  (619, x^4 - x^3 + 3*x - 2, r, -r^3 - r^2 - r - 1, 1, [-1, -1]),
                  (673, x^4 - x^3 - x^2 + 3*x + 1, -r + 1, -2*r + 1, 1, [-1, -1]),
                  (641, x^4 - 2*x^3 + x^2 - 3*x + 1, -r + 1, r^2 - 2, 1, [-1, -1]),
                  (710, x^4 - x^3 + 3*x^2 - 1, -r^3 - 2*r - 2, -2*r^3 + r^2 - 5*r - 2, 1, [-1, -1]),
                  (548, x^4 - x^3 + x - 2, r, r^3 + r^2 - 2*r + 3, 1, [-1, -1]),
                  (734, x^4 - 2*x^3 + 2*x^2 + 2*x - 4, 1/2*r^3 + 2, 1/2*r^3 - r^2 + 2*r + 1, 1, [-1, -1]),
                  (723, x^4 - x^3 - x^2 - 3*x - 1, r^3 - r^2 - r - 2, r^3 - 2*r^2 - 4, 1, [-1, -1]),
                  (736, x^4 - 2*x^3 + 2*x^2 + 2*x - 4, 1/2*r^3 + 2, 1/2*r^3 - r^2 + 3, 1, [-1, -1]),
                  (755, x^4 - x^2 - x - 2, r^2 - 1, -r^3 + 2, 1, [-1, -1]),
                  (746, x^4 - x^3 - 2*x^2 + 3*x + 2, r, -r^3 + 2*r - 1, 1, [-1, -1]),
                  (776, x^4 - x^3 + x^2 + 2*x - 2, -r^3 + r^2 - r - 1, -r^3 + r^2 - r - 2, 1, [-1, -1]),
                  (686, x^4 - x^3 + x^2 - 3*x - 2, r, 1/2*r^3 - 2*r^2 + 3/2*r - 4, 1, [-1, -1]),
                  (764, x^4 - 3*x - 1, -r + 1, -r^2 + r - 1, 1, [-1, -1]),
                  (754, x^4 - x^2 - x - 2, r, -r^3 + 2*r - 1, 1, [-1, -1]),
                  (709, x^4 - x^3 + 3*x^2 - 1, r^3 - r^2 + 3*r - 1, -r - 2, 1, [-1, -1]),
                  (688, x^4 - x^3 + x^2 - 3*x - 2, r, 1/2*r^3 - r^2 + 1/2*r + 2, 1, [-1, -1]),
                  (849, x^4 - x^3 - x^2 - 2*x + 2, r + 1, -r^3 + r^2 + r + 2, 1, [-1, -1]),
                  (820, x^4 - x^3 - 3*x^2 + x - 2, r, 1/2*r^3 + r^2 - 3/2*r, 1, [-1, -1]),
                  (866, x^4 + x^2 - x - 2, -r^2 - 1, r^3 + 2*r - 2, 1, [-1, -1]),
                  (896, x^4 - x^2 - 3*x + 2, r^3 + r^2 - r - 3, r^2 + r, 1, [-1, -1]),
                  (819, x^4 - x^3 - 3*x^2 + x - 2, r, 1/2*r^3 - r^2 - 3/2*r + 4, 1, [-1, -1]),
                  (872, x^4 - x^3 + x^2 - x - 2, -r, r^3 - 1, 1, [-1, -1]),
                  (963, x^4 + x^2 - 4*x - 2, 1/2*r^3 - 1/2*r^2 - 2, r^3 + r - 4, 1, [-1, -1]),
                  (936, x^4 - x^3 - 2*x^2 + x - 3, r, 2, 1, [-1, -1]),
                  (946, x^4 - x^3 + x^2 + 2*x - 4, -1/2*r^3 + 1/2*r^2 + 1/2*r, -r + 2, 1, [-1, -1]),
                  (865, x^4 + x^2 - x - 2, r, -2*r + 1, 1, [-1, -1]),
                  (895, x^4 - x^2 - 3*x + 2, -r, -2*r^3 - r^2 + r + 5, 1, [-1, -1]),
                  (991, x^4 - 2*x^3 - 6*x + 3, 1/2*r^3 - 1/2*r^2 - 1/2*r - 5/2, 1, 1/2*r^2 - r - 1/2, [-1, -1]),
                  (822, x^4 - x^3 - 3*x^2 + x - 2, r, 1/2*r^3 - 1/2*r - 2, 1, [-1, -1]),
                  (945, x^4 - x^3 + x^2 + 2*x - 4, -1/2*r^3 + 1/2*r^2 - 1/2*r, -r^3 - 2*r - 2, 1, [-1, -1]),
                  (887, x^4 - x^3 - 2*x^2 - 2*x + 1, -r - 1, r^3 - 2*r^2 - 2, 1, [-1, -1]),
                  (1042, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r + 1/2, 1, 1, [-1, -1]),
                  (902, x^4 - x^3 + x^2 - 4*x + 2, -r^3 + r^2 - r + 3, r^3 + r, 1, [-1, -1]),
                  (823, x^4 - x^3 - 3*x^2 + x - 2, r, -1/2*r^3 + 2*r^2 + 1/2*r, 1, [-1, -1]),
                  (1051, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r - 1/2, 1/2*r^2 + 1/2*r + 3/2, 1, [-1, -1]),
                  (1048, x^4 + 5*x^2 - 3, 1/2*r^2 - 1/2*r + 5/2, 1, 1, [-1, -1]),
                  (1055, x^4 - x^3 - 2*x - 2, r^2 + 1, r^3 - r^2 - r - 2, 1, [-1, -1]),
                  (1046, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r - 1/2, 1, 1/2*r^3 + 3*r + 1/2, [-1, -1]),
                  (1050, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r + 1/2, 1/2*r^2 - 1/2*r + 3/2, 1, [-1, -1]),
                  (898, x^4 - x^2 - 3*x + 2, -r, r^3 + r - 3, 1, [-1, -1]),
                  (1044, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r + 1/2, 1, r, [-1, -1]),
                  (1049, x^4 + 5*x^2 - 3, 1/2*r^2 + 1/2*r + 5/2, 1, 1, [-1, -1]),
                  (1043, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r - 1/2, 1, 1, [-1, -1]),
                  (1047, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r - 1/2, 1, r, [-1, -1]),
                  (1039, x^4 - x^3 - 2*x^2 + 5*x - 4, r^3 - r + 3, -2*r^3 + 3*r - 6, 1, [-1, -1]),
                  (1045, x^4 + 5*x^2 - 3, 1/2*r^3 + 3*r + 1/2, 1, 1/2*r^3 + 3*r - 1/2, [-1, -1]),
                  (1118, x^4 - x^3 + 2*x^2 - 3*x - 1, r^2 + 2, r^3 + 2*r - 1, 1, [-1, -1]),
                  (1092, x^4 - x^3 - 3*x^2 + 4*x + 1, -r + 2, -r^2 - r + 2, 1, [-1, -1]),
                  (1091, x^4 - x^3 - 3*x^2 + 4*x + 1, -r^3 + r^2 + 2*r - 3, -r^3 + 2*r - 1, 1, [-1, -1]),
                  (1115, x^4 - x^3 - 5*x + 1, 1/2*r^3 + r - 3/2, -1/2*r^3 + r^2 - r + 3/2, 1, [-1, -1]),
                  (923, x^4 + 3*x^2 - x - 1, -r + 1, r^3 - r^2 + 2*r - 3, 1, [-1, -1]),
                  (1015, x^4 - 2*x^2 - x - 2, r + 1, 2*r^2 - r - 4, 1, [-1, -1]),
                  (1072, x^4 - x^3 + 2*x^2 - x - 2, r, -2*r^3 + r^2 - 5*r + 1, 1, [-1, -1]),
                  (953, x^4 - x^3 - 2*x^2 + 2*x - 2, r - 1, r^3 - r^2 - 3*r, 1, [-1, -1]),
                  (1014, x^4 - 2*x^2 - x - 2, r, -r^2 + 2*r + 1, 1, [-1, -1]),
                  (1017, x^4 - 2*x^2 - x - 2, r + 1, r^2 + 2, 1, [-1, -1]),
                  (1038, x^4 - x^3 - 2*x^2 + 5*x - 4, -r^3 + 3*r - 2, r^3 + r^2 - 3*r + 3, 1, [-1, -1]),
                  (1137, x^4 - x^3 - 3*x^2 - x + 2, r, -r^3 + 2*r^2 + 2*r - 1, 1, [-1, -1]),
                  (1016, x^4 - 2*x^2 - x - 2, r, r^3 + r^2 - r + 1, 1, [-1, -1]),
                  (1153, x^4 - x^3 - 4*x^2 + 5*x + 3, r, 2, 1, [-1, -1]),
                  (1003, x^4 + x^2 - 3*x - 1, -r + 1, 2*r - 1, 1, [-1, -1]),
                  (1126, x^4 - x^3 - 3*x^2 + 5*x + 2, r, 1/2*r^3 - r^2 - 3/2*r + 2, 1, [-1, -1]),
                  (1090, x^4 - x^3 - 3*x^2 + 4*x + 1, -r + 1, -r^3 + 4*r, 1, [-1, -1]),
                  (1111, x^4 - 2*x^3 + x^2 - 3*x - 1, r^3 - 2*r^2 + 2*r - 3, -r^3 + 3*r^2 - r + 4, 1, [-1, -1]),
                  (1140, x^4 - x^3 - 3*x^2 - x + 2, r, -r + 3, 1, [-1, -1])]

@parallel
def try_your_luck(code,pol,Pgen,Dgen,Npgen,Sinf,outfile = None):
    if outfile is None:
        outfile = 'out_try_luck_cubic_%s.txt'%code
    fwrite('Starting computation for candidate %s'%str((code,pol,Pgen,Dgen,Npgen,Sinf)),outfile)
    F.<r> = NumberField(pol)
    r = F.gen()
    P = F.ideal(Pgen)
    D = F.ideal(Dgen)
    Np = F.ideal(Npgen)
    Sinf_places = [v for v,o in zip(F.real_places(prec = Infinity),Sinf) if o == -1]
    abtuple = quaternion_algebra_invariants_from_ramification(F,D,Sinf_places)

    G = BigArithGroup(P,abtuple,Np,base = F,grouptype = 'PGL2')
    Coh = CohomologyGroup(G.Gpn)
    fwrite('Computed Cohomology group',outfile)
    flist, hecke_data = Coh.get_twodim_cocycle(sign,return_all = False)
    fwrite('Obtained cocycle',outfile)
    ell, T = hecke_data[0]
    g0, g1 = G.get_pseudo_orthonormal_homology(flist,smoothen = ell)

    fwrite('Obtained homology generators',outfile)
    from homology import lattice_homology_cycle
    xi10,xi20 = lattice_homology_cycle(G,g0,working_prec)
    xi11,xi21 = lattice_homology_cycle(G,g1,working_prec)
    fwrite('Defined homology cycles',outfile)
    Phif = get_overconvergent_class_quaternionic(P,flist[0],G,prec,sign,progress_bar = True)
    Phig = get_overconvergent_class_quaternionic(P,flist[1],G,prec,sign,progress_bar = True)
    fwrite('Overconvergent lift completed',outfile)
    from integrals import integrate_H1
    num = integrate_H1(G,xi10,Phif,1,method = 'moments',prec = working_prec, twist = False,progress_bar = True)
    den = integrate_H1(G,xi20,Phif,1,method = 'moments',prec = working_prec, twist = True,progress_bar = True)
    A = num/den
    fwrite('Finished computation of A period',outfile)
    num = integrate_H1(G,xi11,Phif,1,method = 'moments',prec = working_prec, twist = False,progress_bar = True)
    den = integrate_H1(G,xi21,Phif,1,method = 'moments',prec = working_prec, twist = True,progress_bar = True)
    B = num/den
    fwrite('Finished computation of B period',outfile)

    num = integrate_H1(G,xi11,Phig,1,method = 'moments',prec = working_prec, twist = False,progress_bar = True)
    den = integrate_H1(G,xi21,Phig,1,method = 'moments',prec = working_prec, twist = True,progress_bar = True)
    D = num/den
    fwrite('Finished computation of D period',outfile)

    A = A.add_bigoh(prec + A.valuation())
    B = B.add_bigoh(prec + B.valuation())
    D = D.add_bigoh(prec + D.valuation())

    A = A.trace()/A.parent().degree()
    B = B.trace()/B.parent().degree()
    D = D.trace()/D.parent().degree()

    fwrite('A = %s'%A,outfile)
    fwrite('B = %s'%A,outfile)
    fwrite('D = %s'%A,outfile)
    fwrite('T = %s'%str(T.list()),outfile)
    F = A.parent()
    TF = T.change_ring(F)
    a,b = p_adic_l_invariant(A,B,D,TF)

    fwrite('a = %s'%a,outfile)
    fwrite('b = %s'%b,outfile)

    fwrite('Trying to recognize invariants...',outfile)
    phi = G._F_to_local
    inp_vec = [(a,b,T.transpose(),qords,prec,P.ring(),None,phi) for qords in all_possible_qords(T.transpose().change_ring(ZZ),20)]
    for inpt in inp_vec:
        ans = find_igusa_invariants_from_L_inv(*inpt)
        if ans != 'Nope':
            fwrite(str(ans),outfile)
    fwrite('Done',outfile)


for inpt, outp in try_your_luck(candidate_list):
    print 'Finished inpt = %s'%str(inpt)

# # Below are precomputed values
T = Matrix(ZZ,2,2,[0, -5, -2, -1])
a = 4*7 + 2*7^2 + 5*7^3 + 3*7^4 + 3*7^5 + 4*7^6 + 2*7^7 + 3*7^8 + 6*7^9 + 2*7^10 + 4*7^11 + 3*7^13 + 5*7^14 + 4*7^15 + 3*7^16 + 3*7^17 + 2*7^18 + 2*7^19 + 6*7^20 + 3*7^21 + 7^22 + 2*7^23 + 5*7^24 + 4*7^25 + 4*7^26 + 7^28 + 6*7^29 + 6*7^30 + 7^31 + 5*7^32 + 6*7^33 + 3*7^35 + 5*7^36 + 6*7^37 + 6*7^38 + 3*7^39 + 7^40 + 3*7^41 + 4*7^42 + 2*7^43 + 3*7^44 + 2*7^45 + 2*7^46 + 2*7^47 + 7^48 + 7^49 + 5*7^50 + 2*7^51 + 6*7^52 + 5*7^53 + 7^54 + 3*7^55 + 4*7^57 + 7^58 + 6*7^59 + 2*7^60 + 5*7^62 + 3*7^63 + 4*7^64 + 3*7^65 + 4*7^66 + 5*7^68 + 2*7^69 + 5*7^70 + 5*7^71 + 7^72 + 4*7^73 + 7^74 + 6*7^75 + 4*7^76 + 2*7^77 + 5*7^78 + 7^79 + 4*7^80 + 6*7^81 + 2*7^82 + 4*7^83 + 7^84 + 3*7^85 + 5*7^86 + 4*7^87 + 4*7^89 + 6*7^90 + 4*7^91 + 6*7^92 + 7^93 + 4*7^94 + 3*7^95 + 4*7^96 + 7^99 + 5*7^101 + 6*7^102 + 4*7^104 + 2*7^105 + 7^106 + 5*7^107 + 3*7^108 + 6*7^109 + 7^110 + 6*7^111 + 6*7^112 + 4*7^113 + 6*7^114 + 5*7^115 + 2*7^116 + 2*7^118 + 5*7^119 + 6*7^120 + 5*7^123 + 6*7^124 + 3*7^125 + 5*7^127 + 4*7^128 + 3*7^131 + 5*7^132 + 5*7^133 + 5*7^134 + 4*7^135 + 5*7^137 + 4*7^138 + 6*7^139 + 5*7^140 + 2*7^141 + 3*7^143 + 2*7^144 + 5*7^145 + 2*7^146 + 5*7^147 + 7^148 + 2*7^149 + 7^150 + 4*7^151 + 4*7^152 + 3*7^154 + 3*7^155 + 7^156 + 2*7^157 + 5*7^158 + 3*7^159 + 2*7^160 + 2*7^161 + 4*7^162 + 4*7^163 + 3*7^164 + 6*7^167 + 3*7^168 + 2*7^169 + 4*7^171 + 7^172 + 7^173 + 5*7^174 + 4*7^175 + 2*7^176 + 6*7^177 + 7^178 + 4*7^179 + 6*7^180 + 6*7^181 + 5*7^182 + 4*7^184 + 6*7^185 + 2*7^186 + 3*7^188 + 4*7^189 + 4*7^190 + 5*7^191 + 7^192 + 3*7^193 + 3*7^195 + 6*7^196 + 3*7^197 + 6*7^200 + 4*7^201 + 5*7^202 + 2*7^203 + 2*7^204 + 6*7^205 + 7^206 + 7^207 + 4*7^208 + 7^209 + 5*7^210 + 5*7^211 + 7^212 + 2*7^214 + 7^215 + 4*7^216 + 2*7^217 + 4*7^218 + 6*7^219 + 6*7^220 + 3*7^223 + 2*7^224 + 6*7^225 + 6*7^226 + 6*7^227 + 7^228 + 6*7^229 + 5*7^230 + 2*7^231 + 6*7^232 + 7^233 + 7^234 + 3*7^235 + 6*7^236 + 5*7^237 + 2*7^238 + 2*7^239 + 7^240 + 7^241 + 5*7^242 + 7^243 + 7^244 + 4*7^245 + 5*7^246 + 6*7^247 + 5*7^248 + 6*7^249 + 3*7^250 + 6*7^251 + 2*7^252 + 3*7^253 + 2*7^254 + 5*7^255 + 5*7^256 + 4*7^257 + 2*7^258 + 2*7^259 + 4*7^260 + 5*7^261 + 6*7^262 + 6*7^263 + 4*7^264 + 7^265 + 3*7^266 + 7^267 + 4*7^268 + 6*7^269 + 6*7^270 + 7^271 + 3*7^272 + 3*7^273 + 6*7^274 + 4*7^275 + 5*7^276 + 3*7^277 + 2*7^278 + 7^279 + 3*7^281 + 4*7^282 + 3*7^283 + 4*7^284 + 4*7^285 + 4*7^286 + 2*7^287 + 2*7^288 + 7^289 + 7^291 + 3*7^292 + 7^293 + 4*7^294 + 6*7^295 + 5*7^296 + 7^297 + 6*7^298 + 5*7^299 + O(7^300)
b = 7^2 + 6*7^4 + 2*7^5 + 2*7^6 + 6*7^7 + 5*7^8 + 2*7^9 + 6*7^10 + 3*7^11 + 2*7^12 + 3*7^13 + 2*7^14 + 2*7^15 + 5*7^16 + 2*7^18 + 5*7^19 + 5*7^20 + 5*7^21 + 7^22 + 7^24 + 2*7^25 + 3*7^26 + 6*7^27 + 7^28 + 7^29 + 5*7^30 + 3*7^32 + 6*7^33 + 6*7^34 + 7^35 + 4*7^36 + 5*7^37 + 6*7^38 + 5*7^39 + 2*7^40 + 6*7^41 + 2*7^42 + 6*7^45 + 2*7^46 + 2*7^47 + 2*7^48 + 5*7^49 + 5*7^50 + 3*7^51 + 2*7^52 + 6*7^53 + 2*7^54 + 5*7^55 + 3*7^56 + 5*7^57 + 5*7^58 + 5*7^59 + 5*7^60 + 5*7^61 + 6*7^62 + 6*7^63 + 4*7^64 + 2*7^65 + 7^66 + 4*7^67 + 4*7^68 + 2*7^69 + 6*7^70 + 7^71 + 6*7^72 + 6*7^73 + 7^75 + 2*7^76 + 6*7^77 + 3*7^78 + 2*7^79 + 7^82 + 5*7^83 + 5*7^84 + 6*7^85 + 2*7^86 + 2*7^87 + 3*7^88 + 4*7^89 + 3*7^90 + 3*7^92 + 7^93 + 2*7^94 + 4*7^95 + 5*7^96 + 6*7^97 + 7^98 + 4*7^99 + 6*7^100 + 6*7^101 + 3*7^103 + 5*7^104 + 5*7^105 + 5*7^106 + 2*7^107 + 3*7^109 + 5*7^111 + 4*7^112 + 4*7^113 + 4*7^115 + 7^116 + 6*7^117 + 2*7^118 + 2*7^120 + 5*7^122 + 2*7^123 + 7^124 + 2*7^125 + 7^126 + 7^127 + 2*7^128 + 2*7^129 + 5*7^130 + 6*7^131 + 3*7^132 + 6*7^134 + 3*7^135 + 5*7^136 + 5*7^137 + 2*7^138 + 4*7^139 + 4*7^141 + 3*7^142 + 6*7^143 + 6*7^144 + 3*7^147 + 6*7^148 + 4*7^150 + 4*7^151 + 6*7^152 + 7^153 + 6*7^154 + 6*7^156 + 7^157 + 6*7^158 + 6*7^159 + 2*7^160 + 5*7^161 + 5*7^162 + 3*7^163 + 5*7^164 + 2*7^165 + 2*7^166 + 3*7^167 + 2*7^168 + 2*7^169 + 7^170 + 2*7^171 + 5*7^172 + 5*7^173 + 7^174 + 4*7^175 + 2*7^176 + 5*7^178 + 2*7^179 + 2*7^180 + 2*7^181 + 3*7^182 + 4*7^183 + 6*7^184 + 2*7^185 + 4*7^186 + 6*7^187 + 3*7^188 + 4*7^189 + 5*7^190 + 2*7^191 + 7^192 + 7^193 + 2*7^194 + 5*7^195 + 5*7^196 + 7^197 + 2*7^199 + 5*7^201 + 3*7^202 + 6*7^203 + 2*7^205 + 7^206 + 2*7^208 + 5*7^209 + 6*7^210 + 7^211 + 3*7^212 + 5*7^213 + 7^215 + 5*7^216 + 6*7^217 + 4*7^218 + 3*7^219 + 7^220 + 2*7^221 + 2*7^223 + 5*7^224 + 7^225 + 2*7^226 + 2*7^228 + 3*7^229 + 6*7^230 + 6*7^231 + 4*7^232 + 7^234 + 4*7^235 + 7^236 + 3*7^238 + 4*7^239 + 2*7^240 + 3*7^241 + 5*7^242 + 4*7^243 + 5*7^245 + 7^247 + 5*7^248 + 6*7^249 + 4*7^250 + 4*7^251 + 7^252 + 6*7^253 + 4*7^254 + 3*7^255 + 7^256 + 3*7^257 + 6*7^258 + 2*7^259 + 6*7^260 + 4*7^263 + 3*7^264 + 4*7^265 + 3*7^266 + 2*7^267 + 5*7^268 + 6*7^269 + 6*7^270 + 2*7^271 + 6*7^273 + 7^274 + 5*7^275 + 5*7^276 + 6*7^277 + 4*7^278 + 7^280 + 4*7^282 + 7^283 + 6*7^285 + 2*7^286 + 2*7^287 + 2*7^288 + 6*7^289 + 5*7^290 + 7^291 + 3*7^293 + 7^294 + 2*7^295 + 7^296 + 7^298 + 7^299 + O(7^300)

('129_1', x^3 - x^2 + 2*x - 3, r^2 - r + 1, r, 1, [-1]),

F.<r> = NumberField(x^3 - x^2 + 2*x - 3)
P = F.ideal(r^2 - r + 1)
p = P.norm()
Fp = Qp(p,prec)
phi =  F.hom([F.gen().minpoly().change_ring(Fp).roots()[0][0]])
inp_vec = [(a,b,T.transpose(),qords,prec,P.ring(),None,phi) for qords in all_possible_qords(T.transpose().change_ring(ZZ),20)]


for inpt, outt in find_igusa_invariants_from_L_inv(inp_vec):
    if outt != 'Nope':
        try:
            i2,i4,i6,i10 = list(outt)
            # print 'Success with %s (%s, %s, %s)'%(str(inpt[0][3]),i2**5/i10,i2**3*i4/i10,i2**2*i6/i10)
            print 'Success with %s (%s)'%(str(inpt[0][3]),i10)
        except ValueError:
            print outt
    else:
        print 'Finished %s...'%str(inpt[0][3])

for inpt in inp_vec:
    find_igusa_invariants_from_L_inv(*inpt)

######################################################
# A = 4*11^-11 + 7*11^-10 + 8*11^-9 + 8*11^-8 + 4*11^-7 + 3*11^-6 + 11^-4 + 2*11^-3 + 3*11^-2 + 3*11^-1 + 6 + 6*11 + 5*11^2 + 6*11^3 + 2*11^5 + 11^6 + 2*11^7 + 11^8 + 7*11^9 + 3*11^10 + 10*11^11 + 7*11^12 + 2*11^13 + 3*11^14 + 4*11^15 + 10*11^16 + 10*11^17 + 7*11^18 + 2*11^19 + 4*11^20 + 11^21 + 3*11^22 + 9*11^24 + 4*11^25 + 7*11^26 + 8*11^27 + 10*11^28 + 6*11^29 + 3*11^30 + 6*11^31 + 5*11^32 + 9*11^33 + 3*11^34 + 8*11^35 + 11^37 + 11^38 + 6*11^40 + 9*11^41 + 2*11^42 + 8*11^43 + 10*11^44 + 9*11^45 + 8*11^47 + 8*11^48 + 3*11^49 + 5*11^50 + 10*11^51 + 3*11^52 + 4*11^53 + 7*11^54 + 6*11^55 + 5*11^56 + 9*11^57 + 7*11^58 + 4*11^59 + 7*11^60 + 8*11^61 + 8*11^62 + 9*11^63 + 10*11^64 + 11^65 + 7*11^66 + 11^67 + 5*11^68 + 7*11^69 + 6*11^70 + 5*11^71 + 4*11^72 + 5*11^73 + 8*11^74 + 2*11^75 + 9*11^78 + 9*11^79 + 8*11^80 + 8*11^81 + 7*11^82 + 3*11^83 + 11^85 + 4*11^86 + 2*11^87 + 3*11^88 + O(11^89)
# B = 4*11^-11 + 7*11^-10 + 8*11^-9 + 8*11^-8 + 4*11^-7 + 3*11^-6 + 11^-4 + 2*11^-3 + 3*11^-2 + 3*11^-1 + 6 + 6*11 + 5*11^2 + 6*11^3 + 2*11^5 + 11^6 + 2*11^7 + 11^8 + 7*11^9 + 3*11^10 + 10*11^11 + 7*11^12 + 2*11^13 + 3*11^14 + 4*11^15 + 10*11^16 + 10*11^17 + 7*11^18 + 2*11^19 + 4*11^20 + 11^21 + 3*11^22 + 9*11^24 + 4*11^25 + 7*11^26 + 8*11^27 + 10*11^28 + 6*11^29 + 3*11^30 + 6*11^31 + 5*11^32 + 9*11^33 + 3*11^34 + 8*11^35 + 11^37 + 11^38 + 6*11^40 + 9*11^41 + 2*11^42 + 8*11^43 + 10*11^44 + 9*11^45 + 8*11^47 + 8*11^48 + 3*11^49 + 5*11^50 + 10*11^51 + 3*11^52 + 4*11^53 + 7*11^54 + 6*11^55 + 5*11^56 + 9*11^57 + 7*11^58 + 4*11^59 + 7*11^60 + 8*11^61 + 8*11^62 + 9*11^63 + 10*11^64 + 11^65 + 7*11^66 + 11^67 + 5*11^68 + 7*11^69 + 6*11^70 + 5*11^71 + 4*11^72 + 5*11^73 + 8*11^74 + 2*11^75 + 9*11^78 + 9*11^79 + 8*11^80 + 8*11^81 + 7*11^82 + 3*11^83 + 11^85 + 4*11^86 + 2*11^87 + 3*11^88 + O(11^89)
# D = 4*11^-11 + 7*11^-10 + 8*11^-9 + 8*11^-8 + 4*11^-7 + 3*11^-6 + 11^-4 + 2*11^-3 + 3*11^-2 + 3*11^-1 + 6 + 6*11 + 5*11^2 + 6*11^3 + 2*11^5 + 11^6 + 2*11^7 + 11^8 + 7*11^9 + 3*11^10 + 10*11^11 + 7*11^12 + 2*11^13 + 3*11^14 + 4*11^15 + 10*11^16 + 10*11^17 + 7*11^18 + 2*11^19 + 4*11^20 + 11^21 + 3*11^22 + 9*11^24 + 4*11^25 + 7*11^26 + 8*11^27 + 10*11^28 + 6*11^29 + 3*11^30 + 6*11^31 + 5*11^32 + 9*11^33 + 3*11^34 + 8*11^35 + 11^37 + 11^38 + 6*11^40 + 9*11^41 + 2*11^42 + 8*11^43 + 10*11^44 + 9*11^45 + 8*11^47 + 8*11^48 + 3*11^49 + 5*11^50 + 10*11^51 + 3*11^52 + 4*11^53 + 7*11^54 + 6*11^55 + 5*11^56 + 9*11^57 + 7*11^58 + 4*11^59 + 7*11^60 + 8*11^61 + 8*11^62 + 9*11^63 + 10*11^64 + 11^65 + 7*11^66 + 11^67 + 5*11^68 + 7*11^69 + 6*11^70 + 5*11^71 + 4*11^72 + 5*11^73 + 8*11^74 + 2*11^75 + 9*11^78 + 9*11^79 + 8*11^80 + 8*11^81 + 7*11^82 + 3*11^83 + 11^85 + 4*11^86 + 2*11^87 + 3*11^88 + O(11^89)
# T = Matrix(ZZ,2,2,[1, 1, 1, 2])

T = Matrix(ZZ,2,2,[1, -1, -1, 2])
prec = 300
a = 2*11^2 + 10*11^3 + 9*11^4 + 9*11^5 + 5*11^6 + 7*11^7 + 11^8 + 9*11^9 + 5*11^10 + 7*11^12 + 6*11^14 + 7*11^16 + 7*11^17 + 11^18 + 10*11^19 + 8*11^20 + 4*11^21 + 7*11^22 + 11^23 + 9*11^24 + 2*11^26 + 5*11^27 + 8*11^28 + 11^29 + 4*11^30 + 6*11^31 + 9*11^32 + 7*11^33 + 2*11^34 + 3*11^35 + 10*11^36 + 4*11^37 + 4*11^38 + 2*11^39 + 6*11^40 + 6*11^41 + 8*11^42 + 3*11^43 + 9*11^44 + 4*11^46 + 9*11^47 + 11^48 + 6*11^49 + 4*11^50 + 2*11^51 + 8*11^52 + 11^53 + 9*11^54 + 10*11^55 + 7*11^56 + 7*11^57 + 8*11^58 + 6*11^59 + 10*11^60 + 4*11^61 + 4*11^63 + 11^64 + 5*11^65 + 2*11^66 + 4*11^67 + 11^68 + 6*11^69 + 3*11^70 + 11^71 + 10*11^72 + 10*11^73 + 3*11^74 + 9*11^76 + 8*11^77 + 10*11^79 + 3*11^80 + 3*11^81 + 7*11^82 + 2*11^83 + 3*11^84 + 9*11^85 + 2*11^86 + 6*11^88 + 3*11^89 + 2*11^90 + 2*11^91 + 8*11^92 + 9*11^94 + 3*11^95 + 9*11^96 + 10*11^97 + 8*11^98 + 7*11^99 + 3*11^100 + 7*11^102 + 6*11^103 + 2*11^104 + 2*11^105 + 2*11^106 + 6*11^107 + 5*11^109 + 9*11^110 + 5*11^111 + 3*11^112 + 7*11^113 + 8*11^114 + 2*11^115 + 11^116 + 2*11^117 + 10*11^118 + 9*11^119 + 5*11^120 + 4*11^121 + 7*11^122 + 4*11^123 + 2*11^124 + 6*11^125 + 6*11^126 + 4*11^127 + 9*11^128 + 6*11^130 + 11^131 + 11^132 + 10*11^133 + 7*11^134 + 7*11^136 + 4*11^137 + 2*11^138 + 9*11^139 + 6*11^140 + 6*11^141 + 6*11^142 + 4*11^143 + 2*11^144 + 6*11^145 + 7*11^146 + 2*11^147 + 11^148 + 8*11^149 + 4*11^152 + 3*11^153 + 6*11^155 + 3*11^156 + 8*11^157 + 3*11^158 + 6*11^159 + 9*11^160 + 10*11^162 + 5*11^163 + 10*11^164 + 10*11^165 + 2*11^166 + 11^167 + 8*11^168 + 9*11^169 + 10*11^170 + 10*11^171 + 5*11^173 + 11^174 + 3*11^175 + 11^177 + 10*11^178 + 7*11^179 + 11^180 + 7*11^181 + 11^182 + 9*11^183 + 4*11^184 + 5*11^185 + 8*11^186 + 10*11^187 + 4*11^188 + 6*11^189 + 2*11^190 + 8*11^191 + 3*11^192 + 10*11^193 + 8*11^194 + 6*11^195 + 11^196 + 6*11^197 + 6*11^198 + 10*11^199 + 3*11^200 + 10*11^201 + 11^202 + 7*11^204 + 10*11^205 + 3*11^206 + 6*11^207 + 11^208 + 9*11^209 + 7*11^210 + 3*11^211 + 6*11^212 + 8*11^213 + 9*11^214 + 3*11^215 + 3*11^216 + 10*11^217 + 7*11^218 + 11^219 + 2*11^220 + 8*11^221 + 7*11^224 + 9*11^225 + 4*11^226 + 2*11^227 + 9*11^228 + 2*11^229 + 9*11^230 + 7*11^231 + 2*11^232 + 4*11^233 + 2*11^234 + 11^235 + 11^236 + 6*11^237 + 11^238 + 2*11^239 + 7*11^240 + 2*11^241 + 2*11^242 + 6*11^243 + 6*11^244 + 6*11^245 + 3*11^246 + 6*11^247 + 6*11^248 + 11^249 + 9*11^250 + 2*11^251 + 11^253 + 10*11^254 + 3*11^255 + 9*11^256 + 7*11^257 + 10*11^258 + 4*11^259 + 9*11^260 + 5*11^261 + 3*11^262 + 4*11^263 + 11^265 + 5*11^266 + 8*11^267 + 8*11^268 + 3*11^269 + 6*11^270 + 11^271 + 5*11^273 + 10*11^274 + 5*11^275 + 8*11^276 + 10*11^277 + 3*11^278 + 6*11^279 + 9*11^280 + 7*11^281 + 7*11^282 + 11^284 + 2*11^285 + 2*11^286 + 11^287 + 11^288 + 6*11^289 + 6*11^290 + 7*11^291 + 3*11^292 + 5*11^293 + 11^294 + 5*11^295 + 8*11^296 + 10*11^297 + 9*11^298 + O(11^299)
b = 3*11 + 5*11^3 + 7*11^4 + 9*11^5 + 9*11^6 + 3*11^7 + 6*11^8 + 11^9 + 11^10 + 7*11^11 + 7*11^12 + 4*11^13 + 11^14 + 11^15 + 8*11^16 + 7*11^17 + 9*11^19 + 10*11^20 + 7*11^21 + 6*11^22 + 9*11^23 + 4*11^24 + 2*11^25 + 3*11^26 + 7*11^27 + 6*11^29 + 2*11^30 + 8*11^31 + 4*11^32 + 7*11^33 + 5*11^34 + 9*11^35 + 4*11^36 + 10*11^37 + 9*11^38 + 2*11^39 + 9*11^40 + 6*11^41 + 9*11^43 + 3*11^45 + 5*11^46 + 2*11^47 + 8*11^48 + 10*11^49 + 6*11^50 + 3*11^51 + 6*11^52 + 9*11^53 + 11^54 + 9*11^56 + 11^57 + 10*11^58 + 6*11^59 + 8*11^60 + 7*11^61 + 5*11^62 + 5*11^63 + 9*11^64 + 6*11^65 + 6*11^66 + 4*11^67 + 11^69 + 2*11^70 + 4*11^71 + 8*11^72 + 11^73 + 10*11^74 + 8*11^75 + 3*11^76 + 11^77 + 4*11^78 + 2*11^79 + 11^80 + 10*11^81 + 6*11^82 + 10*11^83 + 9*11^84 + 9*11^85 + 10*11^86 + 9*11^88 + 11^89 + 4*11^90 + 5*11^91 + 6*11^92 + 3*11^95 + 11^96 + 10*11^97 + 5*11^98 + 11^99 + 6*11^100 + 2*11^102 + 10*11^103 + 10*11^104 + 10*11^105 + 7*11^106 + 7*11^107 + 7*11^108 + 6*11^109 + 8*11^110 + 11^111 + 6*11^113 + 10*11^114 + 9*11^116 + 6*11^117 + 9*11^118 + 7*11^119 + 8*11^120 + 10*11^121 + 3*11^122 + 7*11^123 + 8*11^124 + 10*11^125 + 7*11^126 + 8*11^127 + 8*11^128 + 4*11^129 + 3*11^130 + 5*11^131 + 10*11^132 + 7*11^133 + 5*11^134 + 11^135 + 2*11^136 + 8*11^138 + 2*11^139 + 9*11^140 + 6*11^141 + 10*11^142 + 6*11^143 + 8*11^145 + 2*11^146 + 8*11^147 + 11^150 + 2*11^151 + 3*11^152 + 10*11^154 + 5*11^155 + 3*11^156 + 10*11^157 + 11^158 + 11^159 + 4*11^160 + 9*11^161 + 2*11^162 + 8*11^163 + 9*11^164 + 11^165 + 9*11^166 + 8*11^167 + 5*11^168 + 6*11^169 + 11^170 + 4*11^171 + 11^172 + 10*11^173 + 8*11^174 + 3*11^175 + 3*11^176 + 8*11^177 + 9*11^178 + 6*11^179 + 9*11^180 + 2*11^181 + 3*11^182 + 6*11^183 + 5*11^184 + 6*11^185 + 9*11^186 + 4*11^187 + 9*11^188 + 11^189 + 11^190 + 10*11^191 + 3*11^192 + 11^193 + 5*11^194 + 8*11^196 + 11^197 + 8*11^198 + 8*11^199 + 4*11^200 + 2*11^201 + 7*11^202 + 10*11^203 + 5*11^204 + 2*11^206 + 5*11^207 + 9*11^208 + 8*11^209 + 9*11^210 + 10*11^211 + 11^213 + 9*11^214 + 2*11^215 + 4*11^216 + 4*11^218 + 7*11^219 + 11^220 + 5*11^221 + 6*11^222 + 2*11^223 + 6*11^225 + 4*11^226 + 9*11^227 + 6*11^228 + 9*11^229 + 5*11^230 + 9*11^231 + 10*11^232 + 4*11^233 + 11^234 + 4*11^235 + 7*11^236 + 8*11^237 + 5*11^238 + 8*11^239 + 3*11^241 + 5*11^242 + 5*11^243 + 11^244 + 3*11^245 + 10*11^246 + 4*11^247 + 6*11^248 + 2*11^249 + 7*11^250 + 11^251 + 5*11^252 + 10*11^253 + 10*11^254 + 2*11^255 + 3*11^257 + 7*11^258 + 7*11^259 + 5*11^260 + 2*11^261 + 9*11^262 + 3*11^263 + 7*11^264 + 7*11^265 + 4*11^266 + 10*11^267 + 9*11^268 + 4*11^269 + 4*11^270 + 7*11^271 + 3*11^272 + 9*11^273 + 9*11^274 + 11^275 + 2*11^276 + 3*11^278 + 10*11^279 + 7*11^280 + 7*11^281 + 10*11^282 + 7*11^283 + 9*11^285 + 5*11^286 + 11^287 + 2*11^288 + 3*11^289 + 9*11^290 + 11^292 + 7*11^293 + 7*11^294 + 3*11^297 + O(11^299)
#Starting computation for candidate (1048, x^4 + 5*x^2 - 3, 1/2*r^2 - 1/2*r + 5/2, 1, 1, [-1, -1])

F.<r> = NumberField(x^4 + 5*x^2 - 3)
P = F.ideal( 1/2*r^2 - 1/2*r + 5/2)
p = P.norm()
Fp = Qp(p,prec)
phi =  F.hom([F.gen().minpoly().change_ring(Fp).roots()[0][0]])

fT = T.charpoly()
allmats = []
for aa,bb,cc,dd in product(range(-6,7),repeat = 4):
    m = matrix(ZZ,2,2,[aa,bb,cc,dd])
    if m.charpoly() == fT:
        print m
        allmats.append(m)

from operator import methodcaller
inp_vec = [(a,b,TT.transpose(),qords,prec,P.ring(),None,phi) for TT in sorted(allmats,key=methodcaller('norm')) for qords in all_possible_qords(TT.transpose().change_ring(ZZ),5)]


for inpt, outt in find_igusa_invariants_from_L_inv(inp_vec):
    if outt != 'Nope':
        try:
            i2,i4,i6,i10 = list(outt)
            # print 'Success with %s (%s, %s, %s)'%(str(inpt[0][3]),i2**5/i10,i2**3*i4/i10,i2**2*i6/i10)
            print 'Success with %s (%s)'%(str(inpt[0][3]),i10)
        except ValueError:
            print outt
    else:
        print 'Finished %s...'%str(inpt[0][3])
